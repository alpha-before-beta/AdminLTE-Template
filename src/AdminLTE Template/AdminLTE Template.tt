<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ output extension=".txt" #>
<?xml version="1.0" encoding="utf-8"?>
<VSTemplate Version="3.0.0" Type="Project" xmlns="http://schemas.microsoft.com/developer/vstemplate/2005" xmlns:sdk="http://schemas.microsoft.com/developer/vstemplate-sdkextension/2010">
  <TemplateData>
    <Name>AdminLTE Template</Name>
    <Description>A C# ASP.NET MVC Project Template for Visual Studio using the popular AdminLTE Bootstrap Template by Abdullah Almsaeed.</Description>
    <Icon>AdminLTE.ico</Icon>
    <ProjectType>CSharp</ProjectType>
    <ProjectSubType>Web</ProjectSubType>
    <RequiredFrameworkVersion>4.5</RequiredFrameworkVersion>
    <SortOrder>1000</SortOrder>
    <TemplateID>d5eb7a76-1c73-42c3-a230-f1df9755cd59</TemplateID>
    <CreateNewFolder>true</CreateNewFolder>
    <DefaultName>AdminLTE</DefaultName>
    <ProvideDefaultName>true</ProvideDefaultName>
  </TemplateData>
  <TemplateContent>
    <Project File="ProjectTemplate.csproj" ReplaceParameters="true">
<#
    const int startingIndentation = 3;
    ProcessDirectory(Host.ResolvePath(""), startingIndentation);
#>
      <Folder Name="Models">
      </Folder>
    </Project>
  </TemplateContent>
</VSTemplate>
<#+
    void ProcessDirectory(string baseDir, int indentLevel)
    {
        var filesToExclude = new[]
        {
            Path.Combine(baseDir, "AdminLTE Template.tt"),
            Path.Combine(baseDir, "AdminLTE Template.txt"),
            Path.Combine(baseDir, "AdminLTE Template.csproj"),
            Path.Combine(baseDir, "AdminLTE Template.csproj.user"),
            Path.Combine(baseDir, "AdminLTE Template.vstemplate"),
            Path.Combine(baseDir, "AdminLTE.ico"),
            Path.Combine(baseDir, "packages.tt"),
            Path.Combine(baseDir, "ProjectTemplate.tt"),
            Path.Combine(baseDir, "ProjectTemplate.txt"),
            Path.Combine(baseDir, "ProjectTemplate.csproj")
        };

        var directoriesToExclude = new[]
        {
            Path.Combine(baseDir, "bin"),
            Path.Combine(baseDir, "obj"),
            Path.Combine(baseDir, "Properties")
        };

        var codeFileTypes = new[]
        {
            ".cs",
            ".cshtml",
            ".config",
            ".asax"
        };

        foreach (string file in Directory.GetFiles(baseDir))
        {
            if (filesToExclude.Contains(file))
            {
                continue;
            }

            // Handle special cases
            if (file == Path.Combine(baseDir, "AssemblyInfo.cs"))
            {
                WriteLine(Indent("<ProjectItem ReplaceParameters=\"true\" TargetFileName=\"Properties\\AssemblyInfo.cs\">AssemblyInfo.cs</ProjectItem>", indentLevel));
                continue;
            }

            if (EndsWithAny(file, codeFileTypes))
            {
                WriteLine(Indent("<ProjectItem ReplaceParameters=\"true\">" + Path.GetFileName(file) + "</ProjectItem>", indentLevel));
            }
            else
            {
                WriteLine(Indent("<ProjectItem>" + Path.GetFileName(file) + "</ProjectItem>", indentLevel));
            }
        }

        foreach (string subdirectory in Directory.GetDirectories(baseDir))
        {
            if (directoriesToExclude.Contains(subdirectory))
            {
                continue;
            }

            WriteLine(Indent("<Folder Name=\"" + new DirectoryInfo(subdirectory).Name + "\">", indentLevel));
            ProcessDirectory(subdirectory, indentLevel + 1);
            WriteLine(Indent("</Folder>", indentLevel));
        }
    }

    static string Indent(string value, int indent)
    {
        const int spacesPerIndent = 2;

        return new string(' ', indent * spacesPerIndent) + value;
    }

    static bool EndsWithAny(string value, IEnumerable<string> endings)
    {
        foreach (var ending in endings)
        {
            if (value.EndsWith(ending))
            {
                return true;
            }
        }

        return false;
    }
#>